{"version":3,"file":"Debug-8d29e0ff.js","sources":["../../src/components/debug/ObjectPrint.svelte","../../src/components/debug/Debug.svelte"],"sourcesContent":["<script context=\"module\">\n\timport { is_array, is_object, is_string } from 'src/utils/check'\n</script>\n\n<script>\n\t/** Could be any object. Single values, arrays and objects are supported */\n\texport let object = []\n\t/** Leave empty to hide */\n\texport let name = ''\n\n\t$: object_is_array = is_array(object)\n\t$: object_entries = Object.entries(object)\n\t$: object_is_empty =\n\t\t(object_is_array && object.length === 0) ||\n\t\t(is_object(object) && object_entries.length === 0)\n</script>\n\n<div class:hidden={object_is_empty}>\n\t<h4 class:hidden={name === ''}><pre>{name}</pre></h4>\n\t<ul>\n\t\t{#each object_entries as [key, value] (key)}\n\t\t\t<li class:is-array={object_is_array}>\n\t\t\t\t<code class:hidden={object_is_array}>{key}:</code>\n\n\t\t\t\t{#if is_object(value) || is_array(value)}\n\t\t\t\t\t<svelte:self object={value} />\n\t\t\t\t{:else}\n\t\t\t\t\t<code>{is_string(value) ? value : JSON.stringify(value)}</code>\n\t\t\t\t{/if}\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</div>\n\n<style>\n\t.is-array {\n\t\tlist-style-type: circle;\n\t}\n\t.hidden {\n\t\tdisplay: none;\n\t}\n</style>\n","<script context=\"module\">\n\timport ObjectPrint from 'src/components/debug/ObjectPrint.svelte'\n\n\timport { cache, api_log, log, settings } from 'src/stores'\n</script>\n\n<div class=\"wrapper\">\n\t<pre>Current version build time: {import.meta.env.VITE_VERSION}</pre>\n\n\t<ObjectPrint name=\"LocalStorage.settings\" object={$settings} />\n\t<ObjectPrint name=\"LocalStorage.cache\" object={$cache} />\n\t<ObjectPrint name=\"Log\" object={$log} />\n\t<ObjectPrint name=\"API call log\" object={$api_log.map((e) => decodeURI(e))} />\n</div>\n\n<style lang=\"scss\">\n\t.wrapper {\n\t\tpadding: 1em;\n\n\t\t& :global(ul) {\n\t\t\tlist-style-type: '- ';\n\t\t}\n\n\t\t& :global(code) {\n\t\t\tmargin: 0;\n\t\t\theight: 1em;\n\t\t\toverflow-wrap: anywhere;\n\t\t}\n\t}\n</style>\n"],"names":["t_value","is_string","ctx","insert","target","code","anchor","dirty","set_data","t","show_if","is_object","is_array","li","append","t0","t0_value","i","toggle_class","h4","div","pre","ul","object","$$props","name","$$invalidate","object_is_array","object_entries","object_is_empty","objectprint3_changes","e"],"mappings":"qXA2BYA,GAAAC,EAAUC,EAAK,CAAA,CAAA,EAAIA,EAAK,CAAA,EAAG,KAAK,UAAUA,EAAK,CAAA,CAAA,GAAA,2CAAtDC,EAA8DC,EAAAC,EAAAC,CAAA,iBAAvDC,EAAA,GAAAP,KAAAA,GAAAC,EAAUC,EAAK,CAAA,CAAA,EAAIA,EAAK,CAAA,EAAG,KAAK,UAAUA,EAAK,CAAA,CAAA,GAAA,KAAAM,EAAAC,EAAAT,CAAA,+EAFjCE,EAAK,CAAA,CAAA,CAAA,CAAA,gFAALA,EAAK,CAAA,uHAHWA,EAAG,CAAA,EAAA,4EAEpCQ,GAAA,OAAAA,EAAA,CAAA,EAAAC,EAAUT,EAAU,CAAA,CAAA,GAAAU,EAASV,EAAK,CAAA,CAAA,iGAFG,GAAC,+DAAvBA,EAAe,CAAA,CAAA,+CADhBA,EAAe,CAAA,CAAA,uBAAnCC,EAQIC,EAAAS,EAAAP,CAAA,EAPHQ,EAAiDD,EAAAR,CAAA,gFAAXH,EAAG,CAAA,EAAA,KAAAM,EAAAO,EAAAC,CAAA,0BAArBd,EAAe,CAAA,CAAA,8JADhBA,EAAe,CAAA,CAAA,oHAD7BA,EAAc,CAAA,CAAA,aAAkBA,EAAG,CAAA,kBAAxC,OAAIe,GAAA,EAAA,2FAF8Bf,EAAI,CAAA,CAAA,qFAAvBgB,EAAAC,EAAA,SAAAjB,OAAS,EAAE,6CADXA,EAAe,CAAA,CAAA,UAAlCC,EAeKC,EAAAgB,EAAAd,CAAA,EAdJQ,EAAoDM,EAAAD,CAAA,EAArBL,EAAiBK,EAAAE,CAAA,gBAChDP,EAYIM,EAAAE,CAAA,iFAbiCpB,EAAI,CAAA,CAAA,aAAvBgB,EAAAC,EAAA,SAAAjB,OAAS,EAAE,YAErBA,EAAc,CAAA,CAAA,mEAHJA,EAAe,CAAA,CAAA,+BAG9B,OAAIe,GAAA,kJAdI,OAAAM,EAAM,EAAA,EAAAC,EAEN,CAAA,KAAAC,EAAO,EAAC,EAAAD,8GAEhBE,EAAA,EAAAC,EAAkBf,EAASW,CAAM,CAAA,qBACjCK,EAAiB,OAAO,QAAQL,CAAM,CAAA,qBACtCM,EACDF,GAAmBJ,EAAO,SAAW,GACrCZ,EAAUY,CAAM,GAAKK,EAAe,SAAW,CAAC,iMCLA1B,EAAS,CAAA,sDACZA,EAAM,CAAA,uCACrBA,EAAI,CAAA,CAAA,wCACK,OAAAA,KAAS,IAAGA,EAAA,CAAA,CAAA,gCALnBmB,EAAA,YAAA,uMADnClB,EAOKC,EAAAgB,EAAAd,CAAA,EANJQ,EAAoEM,EAAAC,CAAA,uHAElBnB,EAAS,CAAA,uCACZA,EAAM,CAAA,uCACrBA,EAAI,CAAA,wBACKK,EAAA,IAAAuB,EAAA,OAAA5B,KAAS,IAAGA,EAAA,CAAA,CAAA,+VAAE6B,GAAM,UAAUA,CAAC"}